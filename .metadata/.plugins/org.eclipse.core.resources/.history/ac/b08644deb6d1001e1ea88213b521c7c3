package com.in28minutes.funtionalprogramming;

import java.util.List;
import java.util.Optional;
import java.util.stream.IntStream;

public class FpNumberRunner {

	public static void main(String[] args) {
//		List<Integer> numbers = List.of(4, 6, 8, 12, 3, 15);
//
//		int sum = normalSum(numbers);
//		System.out.println("normal:\t" + sum);
//
//		int fpSum = numbers.stream().reduce(0, (num1, num2) -> num1 + num2);
//		System.out.println("fp:\t" + fpSum);
//
//		int oddSumVal = oddSum(numbers);
//		System.out.println("oddSum:\t" + oddSumVal);
//
//		streamOperations();

//		streamExercises();

		streamTerminalOperations();

	}

	static int normalSum(List<Integer> numbers) {
		int sum = 0;

		for (int num : numbers) {
			sum += num;
		}

		return sum;
	}

	static int oddSum(List<Integer> numbers) {
		return numbers.stream().filter(num -> num % 2 == 1).reduce(0, (num1, num2) -> num1 + num2);
	}

	static void streamOperations() {
		List<Integer> numbers = List.of(3, 5, 8, 5, 213, 45, 4, 7, 3);
		System.out.println("Sorted");
		numbers.stream().sorted().forEach(e -> System.out.print(e + "\t"));

		System.out.println("\nDistinct");
		numbers.stream().distinct().forEach(e -> System.out.print(e + "\t"));

		System.out.println("\nSorted & Distinct");
		numbers.stream().distinct().sorted().forEach(e -> System.out.print(e + "\t"));
	}

	static void streamExercises() {
		List<Integer> numbers = List.of(4, 6, 8, 12, 3, 15);
		List<String> strings = List.of("Apple", "Ant", "Bat");

		// Print squares of first 10 numbers
		numbers.stream().sorted().forEach(e -> {
			if (e >= 1 && e <= 10) {
				System.out.println(e * e);
			}
		});

		// Map strings to lowercase & print
		strings.stream().forEach(e -> System.out.println(e.toLowerCase()));

		// Print length of each string
		strings.stream().forEach(e -> System.out.println(e.length()));
	}

	static void streamTerminalOperations() {
		int val = IntStream.range(1, 11).reduce(0, (n1, n2) -> n1 + n2);
		System.out.printf("reduce:\t%d", val);

		Optional<Integer> val2 = List.of(23, 12, 34, 53).stream().max((n1, n2) -> Integer.compare(n1, n2));
		System.out.printf("\nmax:\t%d", val2.get());

		Optional<Integer> val3 = List.of(23, 12, 34, 53).stream().min((n1, n2) -> Integer.compare(n1, n2));
		System.out.printf("\nmin:\t%d", val3.get());

		Optional<Integer> val4 = List.of(23, 12, 34, 53).stream().filter(e -> e % 2 == 1);
		System.out.printf("\nodds:\t%d", val4.get());

	}

}
